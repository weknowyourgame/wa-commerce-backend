// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id                  String         @id @default(uuid())
  userId              String         @unique // Link to Better Auth User
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  upiNumber           String?
  apiToken            String         @default(uuid())
  website             String?
  businessInfo        Json?
  isOnboarded         Boolean        @default(false)
  onboardingStep      Int            @default(0)
  // WhatsApp Business API Configuration
  phoneNumberId       String?
  whatsappAccessToken String?
  products            Product[]
  orders              Order[]
  webhookEvents       WebhookEvent[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  price       Float
  merchantId  String
  merchant    Merchant @relation(fields: [merchantId], references: [id])
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id        String   @id @default(uuid())
  phone     String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  customerId String
  merchantId String
  productId  String
  txnId      String?
  amount     Float
  status     OrderStatus @default(PENDING)
  paidAt     DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  merchant Merchant @relation(fields: [merchantId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FAILED
}

model WebhookEvent {
  id         String   @id @default(uuid())
  payload    Json
  merchantId String
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  receivedAt DateTime @default(now())
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  merchant      Merchant?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
